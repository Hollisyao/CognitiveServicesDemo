<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AutomaticPhotoCapturePage_Headline.Text" xml:space="preserve">
    <value>Automatic Photo Capture Sample</value>
  </data>
  <data name="AutomaticPhotoCapturePage_Headline2.Text" xml:space="preserve">
    <value>Automatic photo capture via face tracking and motion detection</value>
  </data>
  <data name="AutomaticPhotoCapturePage_Start.Text" xml:space="preserve">
    <value>Step in front of the camera to start!</value>
  </data>
  <data name="AutomaticPhotoCapturePage_Tip.Text" xml:space="preserve">
    <value>Try a different pose next time!&amp;#10;Another round will begin shortly...</value>
  </data>
  <data name="LandingPage_Foot.Text" xml:space="preserve">
    <value>- Start by entering API Keys in the Settings Page (they will persist between sessions).</value>
  </data>
  <data name="LandingPage_Foot2.Text" xml:space="preserve">
    <value>- Use the Face Identification Setup page if you want to train the kiosk to identify specific people.</value>
  </data>
  <data name="LandingPage_Foot3.Text" xml:space="preserve">
    <value>- If you have multiple cameras, a camera selector is available in the Settings Page.</value>
  </data>
  <data name="LandingPage_More.Text" xml:space="preserve">
    <value>For more information visit</value>
  </data>
  <data name="LandingPage_Overview.Text" xml:space="preserve">
    <value>OVERVIEW</value>
  </data>
  <data name="LandingPage_Welcome.Text" xml:space="preserve">
    <value>Welcome to the Intelligent Kiosk Sample! Here you will find several demos showcasing workflows and experiences built on top of the Microsoft Cognitive Services.</value>
  </data>
  <data name="LandingPage_Welcome2.Text" xml:space="preserve">
    <value>The kiosk is an example of an intelligent application, one that can understand human faces and predict their age, gender and emotion. It can do so from live images from a web cam, Bing Images or local photos. It also allows you to very quickly create and train a model to perform face identification against any pre-determined set of faces.</value>
  </data>
  <data name="MallKioskPage_Emotion.Text" xml:space="preserve">
    <value>Emotion Response:</value>
  </data>
  <data name="MallKioskPage_Headline.Text" xml:space="preserve">
    <value>Mall Kiosk</value>
  </data>
  <data name="MallKioskPage_Headline2.Text" xml:space="preserve">
    <value>Take a photo to get a product recommendation!</value>
  </data>
  <data name="RealTimeDemo_Headline.Text" xml:space="preserve">
    <value>Realtime Crowd Insights Sample</value>
  </data>
  <data name="RealTimeDemo_Headline2.Text" xml:space="preserve">
    <value>Deriving realtime crowd insights from age, gender, emotion, face identification and unique face tracking</value>
  </data>
  <data name="RealTimeDemo_Tip.Text" xml:space="preserve">
    <value>Resetting data...</value>
  </data>
  <data name="RealtimeDriverMonitoring_Alert.Text" xml:space="preserve">
    <value>No faces detected. Please look at the camera to start.</value>
  </data>
  <data name="RealtimeDriverMonitoring_DriverId.Text" xml:space="preserve">
    <value>Driver Id</value>
  </data>
  <data name="RealtimeDriverMonitoring_EyeAperture.Text" xml:space="preserve">
    <value>Current aperture:</value>
  </data>
  <data name="RealtimeDriverMonitoring_Eyes.Text" xml:space="preserve">
    <value>Eyes</value>
  </data>
  <data name="RealtimeDriverMonitoring_Headline.Text" xml:space="preserve">
    <value>Realtime Driver Monitoring</value>
  </data>
  <data name="RealtimeDriverMonitoring_LookingAway.Text" xml:space="preserve">
    <value>Looking away!</value>
  </data>
  <data name="RealtimeDriverMonitoring_Mouth" xml:space="preserve">
    <value>Mouth</value>
  </data>
  <data name="RealtimeDriverMonitoring_MouthAperture.Text" xml:space="preserve">
    <value>Current aperture:</value>
  </data>
  <data name="RealtimeDriverMonitoring_RestoreButton.Content" xml:space="preserve">
    <value>Restore default thresholds</value>
  </data>
  <data name="RealtimeDriverMonitoring_Sleep.Text" xml:space="preserve">
    <value>Sleeping!</value>
  </data>
  <data name="RealtimeDriverMonitoring_SleepingSlider.Header" xml:space="preserve">
    <value>Minimum aperture for eyes to be considered open:</value>
  </data>
  <data name="RealtimeDriverMonitoring_Yawning.Text" xml:space="preserve">
    <value>Yawning!</value>
  </data>
  <data name="RealtimeDriverMonitoring_YawningSlider.Header" xml:space="preserve">
    <value>Minimun aperture for mouth to be considered yawning:</value>
  </data>
  <data name="String1RealtimeDriverMonitoring_WrapWholeWords.Text" xml:space="preserve">
    <value>The Driver Id is determined by identifying the face against the trained faces. 
&lt;LineBreak/&gt;
&lt;LineBreak/&gt;The Facial Features are used to flag yawning and sleeping (see below how to tweak the thresholds for this if needed).
&lt;LineBreak/&gt;
&lt;LineBreak/&gt;The Head Pose is used to flag when the driver is looking away.
&lt;LineBreak/&gt;
&lt;LineBreak/&gt;When Activity tracking is enabled and the captioning from the Vision API contains certain keywords, like &amp;quot;phone&amp;quot; or &amp;quot;banana&amp;quot;, a special message will be displayed.</value>
  </data>
</root>